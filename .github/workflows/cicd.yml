name: cicd

on:
  push:
    branches: ['main', 'uat', 'development', 'feature/**'] # '**' match any character including '/'. '*' match any character excluding '/'.
  pull_request:
    branches: ['main', 'uat', 'development']

env:
  # if it is a main, uat, or development branch, we want to create and push docker image
  # DOCKERIZE: ${{ endsWith(github.ref, '/main') || endsWith(github.ref, '/uat') || endsWith(github.ref, '/development') }}
  # DOCKERIZE: ${{ (github.ref == 'refs/heads/main') || (github.ref == 'refs/heads/uat') || (github.ref == 'refs/heads/development') }}
  DOCKERIZE: endsWith(github.ref, '/main') # temporarily I let's just create docker image only for main build
  VERSION_TAGGED: ${{ contains(github.event.ref, '/tags/v') }}

jobs:
  # 'This' workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
  ci-initialization:
    runs-on: ubuntu-latest

    strategy:
      matrix: # performing action on multiple version/platform
        node-version: [18.x] # [18.x, 20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Installing
        run: npm ci

      # # This workflow executes several linters on changed files based on languages used in your code base whenever
      # # you push a code or open a pull request.
      # - name: Lint Code Base
      #   uses: github/super-linter@v4
      #   env:
      #     VALIDATE_ALL_CODEBASE: false
      #     DEFAULT_BRANCH: 'main'
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     # below is for customizing lint rules
      #     LINTER_RULES_PATH: /
      #     JAVASCRIPT_ES_CONFIG_FILE: eslint.config.js
      #     VALIDATE_JAVASCRIPT_STANDARD: false
      #     VALIDATE_CSS: false
      #     TYPESCRIPT_DEFAULT_STYLE: prettier # ts-standard # default is ts-standard
      #     # disabled for throwing trivial or non-sensical errors
      #     VALIDATE_HTML: false # err on .component.html, e.g: must include DOC=HTML at the start of every .html
      #     VALIDATE_POWERSHELL: false # error on .sh, i.e.: 'error  Parsing error: Unexpected token :'
      #     VALIDATE_SHELL_SHFMT: false # err on .sh, strict non-sense as there is no hint about what is wrong.
      #     VALIDATE_JSON: false # err on .json, i.e.: 'error  Parsing error: Unexpected token :'
      #     IGNORE_GENERATED_FILES: true
      #     IGNORE_GITIGNORED_FILES: true
      #     FILTER_REGEX_EXCLUDE: .*http/.* # exclude files inside http/ folder to avoid api calls error
      #     VALIDATE_JSCPD: false # keeps throwing errors that do not make sense, and does not work with eslint's new eslint.config.js file
      # # - run: npm run build --if-present

      - name: Running ng lint
        run: npm run lint

      - name: Running unit tests
        run: npm run ci:test

  docker:
    needs: ci-initialization
    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        if: env.DOCKERIZE == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: env.DOCKERIZE == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: env.DOCKERIZE == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        if: env.DOCKERIZE == 'true'
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/private
